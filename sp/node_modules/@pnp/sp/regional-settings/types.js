import { __decorate } from "tslib";
import { dateAdd, hOP } from "@pnp/core";
import { _SPInstance, SPCollection, spInvokableFactory, _SPCollection, } from "../spqueryable.js";
import { defaultPath } from "../decorators.js";
import { spPost } from "../operations.js";
let _RegionalSettings = class _RegionalSettings extends _SPInstance {
    /**
     * Gets time zone
     */
    get timeZone() {
        return TimeZone(this);
    }
    /**
     * Gets time zones
     */
    get timeZones() {
        return TimeZones(this);
    }
    /**
     * Gets the collection of languages used in a server farm.
     */
    async getInstalledLanguages() {
        const results = await SPCollection(this, "installedlanguages")();
        return results.Items;
    }
};
_RegionalSettings = __decorate([
    defaultPath("regionalsettings")
], _RegionalSettings);
export { _RegionalSettings };
export const RegionalSettings = spInvokableFactory(_RegionalSettings);
let _TimeZone = class _TimeZone extends _SPInstance {
    /**
     * Gets an Local Time by UTC Time
     *
     * @param utcTime UTC Time as Date or ISO String
     */
    async utcToLocalTime(utcTime) {
        let dateIsoString;
        if (typeof utcTime === "string") {
            dateIsoString = utcTime;
        }
        else {
            dateIsoString = utcTime.toISOString();
        }
        const res = await spPost(TimeZone(this, `utctolocaltime('${dateIsoString}')`));
        return hOP(res, "UTCToLocalTime") ? res.UTCToLocalTime : res;
    }
    /**
     * Gets an UTC Time by Local Time
     *
     * @param localTime Local Time as Date or ISO String
     */
    async localTimeToUTC(localTime) {
        let dateIsoString;
        if (typeof localTime === "string") {
            dateIsoString = localTime;
        }
        else {
            dateIsoString = dateAdd(localTime, "minute", localTime.getTimezoneOffset() * -1).toISOString();
        }
        const res = await spPost(TimeZone(this, `localtimetoutc('${dateIsoString}')`));
        return hOP(res, "LocalTimeToUTC") ? res.LocalTimeToUTC : res;
    }
};
_TimeZone = __decorate([
    defaultPath("timezone")
], _TimeZone);
export { _TimeZone };
export const TimeZone = spInvokableFactory(_TimeZone);
let _TimeZones = class _TimeZones extends _SPCollection {
    /**
     * Gets an TimeZone by id (see: https://msdn.microsoft.com/en-us/library/office/jj247008.aspx)
     *
     * @param id The integer id of the timezone to retrieve
     */
    getById(id) {
        return spPost(TimeZones(this, `GetById(${id})`));
    }
};
_TimeZones = __decorate([
    defaultPath("timezones")
], _TimeZones);
export { _TimeZones };
export const TimeZones = spInvokableFactory(_TimeZones);
//# sourceMappingURL=types.js.map