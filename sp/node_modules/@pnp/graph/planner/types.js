import { __decorate } from "tslib";
import { body } from "@pnp/queryable";
import { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from "../graphqueryable.js";
import { getById, deleteableWithETag, updateableWithETag } from "../decorators.js";
import { graphPost } from "../operations.js";
import { defaultPath } from "../decorators.js";
/**
 * Planner
 */
let _Planner = class _Planner extends _GraphQueryableInstance {
    // Should Only be able to get by id, or else error occur
    get plans() {
        return Plans(this);
    }
    // Should Only be able to get by id, or else error occur
    get tasks() {
        return Tasks(this);
    }
    // Should Only be able to get by id, or else error occur
    get buckets() {
        return Buckets(this);
    }
};
_Planner = __decorate([
    defaultPath("planner")
], _Planner);
export { _Planner };
export const Planner = graphInvokableFactory(_Planner);
/**
 * Details
 */
let _PlanDetails = class _PlanDetails extends _GraphQueryableInstance {
};
_PlanDetails = __decorate([
    defaultPath("details"),
    updateableWithETag()
], _PlanDetails);
export { _PlanDetails };
export const PlanDetails = graphInvokableFactory(_PlanDetails);
/**
 * Plan
 */
let _Plan = class _Plan extends _GraphQueryableInstance {
    get tasks() {
        return Tasks(this);
    }
    get buckets() {
        return Buckets(this);
    }
    get details() {
        return PlanDetails(this);
    }
};
_Plan = __decorate([
    updateableWithETag(),
    deleteableWithETag()
], _Plan);
export { _Plan };
export const Plan = graphInvokableFactory(_Plan);
let _Plans = class _Plans extends _GraphQueryableCollection {
    /**
     * Create a new Planner Plan.
     *
     * @param owner Id of Group object.
     * @param title The Title of the Plan.
     */
    async add(owner, title) {
        const data = await graphPost(this, body({ owner, title }));
        return {
            data,
            plan: this.getById(data.id),
        };
    }
};
_Plans = __decorate([
    defaultPath("plans"),
    getById(Plan)
], _Plans);
export { _Plans };
export const Plans = graphInvokableFactory(_Plans);
/**
 * Details
 */
let _TaskDetails = class _TaskDetails extends _GraphQueryableInstance {
};
_TaskDetails = __decorate([
    defaultPath("details"),
    updateableWithETag()
], _TaskDetails);
export { _TaskDetails };
export const TaskDetails = graphInvokableFactory(_TaskDetails);
/**
 * Task
 */
let _Task = class _Task extends _GraphQueryableInstance {
    get details() {
        return TaskDetails(this);
    }
};
_Task = __decorate([
    updateableWithETag(),
    deleteableWithETag()
], _Task);
export { _Task };
export const Task = graphInvokableFactory(_Task);
/**
 * Tasks
 */
let _Tasks = class _Tasks extends _GraphQueryableCollection {
    /**
     * Create a new Planner Task.
     *
     * @param planId Id of Plan.
     * @param title The Title of the Task.
     * @param assignments Assign the task
     * @param bucketId Id of Bucket
     */
    async add(planId, title, assignments, bucketId) {
        let postBody = {
            planId,
            title,
            ...assignments,
        };
        if (bucketId) {
            postBody = {
                ...postBody,
                bucketId,
            };
        }
        const data = await graphPost(this, body(postBody));
        return {
            data,
            task: this.getById(data.id),
        };
    }
};
_Tasks = __decorate([
    defaultPath("tasks"),
    getById(Task)
], _Tasks);
export { _Tasks };
export const Tasks = graphInvokableFactory(_Tasks);
/**
 * Bucket
 */
let _Bucket = class _Bucket extends _GraphQueryableInstance {
    get tasks() {
        return Tasks(this);
    }
};
_Bucket = __decorate([
    updateableWithETag(),
    deleteableWithETag()
], _Bucket);
export { _Bucket };
export const Bucket = graphInvokableFactory(_Bucket);
/**
 * Buckets
 */
let _Buckets = class _Buckets extends _GraphQueryableCollection {
    /**
     * Create a new Bucket.
     *
     * @param name Name of Bucket object.
     * @param planId The Id of the Plan.
     * @param oderHint Hint used to order items of this type in a list view.
     */
    async add(name, planId, orderHint) {
        const postBody = {
            name: name,
            orderHint: orderHint ? orderHint : "",
            planId: planId,
        };
        const data = await graphPost(this, body(postBody));
        return {
            bucket: this.getById(data.id),
            data,
        };
    }
};
_Buckets = __decorate([
    defaultPath("buckets"),
    getById(Bucket)
], _Buckets);
export { _Buckets };
export const Buckets = graphInvokableFactory(_Buckets);
//# sourceMappingURL=types.js.map