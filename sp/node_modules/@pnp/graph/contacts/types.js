import { __decorate } from "tslib";
import { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from "../graphqueryable.js";
import { defaultPath, updateable, deleteable, getById } from "../decorators.js";
import { graphPost } from "../operations.js";
import { body } from "@pnp/queryable";
/**
 * Contact
 */
let _Contact = class _Contact extends _GraphQueryableInstance {
};
_Contact = __decorate([
    updateable(),
    deleteable()
], _Contact);
export { _Contact };
export const Contact = graphInvokableFactory(_Contact);
/**
 * Contacts
 */
let _Contacts = class _Contacts extends _GraphQueryableCollection {
    /**
    * Create a new Contact for the user.
    *
    * @param givenName The contact's given name.
    * @param surName The contact's surname.
    * @param emailAddresses The contact's email addresses.
    * @param businessPhones The contact's business phone numbers.
    * @param additionalProperties A plain object collection of additional properties you want to set on the new contact
    */
    async add(givenName, surName, emailAddresses, businessPhones, additionalProperties = {}) {
        const postBody = {
            businessPhones,
            emailAddresses,
            givenName,
            surName,
            ...additionalProperties,
        };
        const data = await graphPost(this, body(postBody));
        return {
            contact: this.getById(data.id),
            data,
        };
    }
};
_Contacts = __decorate([
    defaultPath("contacts"),
    getById(Contact)
], _Contacts);
export { _Contacts };
export const Contacts = graphInvokableFactory(_Contacts);
/**
 * Contact Folder
 */
let _ContactFolder = class _ContactFolder extends _GraphQueryableInstance {
    /**
     * Gets the contacts in this contact folder
     */
    get contacts() {
        return Contacts(this);
    }
    /**
    * Gets the contacts in this contact folder
    */
    get childFolders() {
        return ContactFolders(this, "childFolders");
    }
};
_ContactFolder = __decorate([
    deleteable(),
    updateable()
], _ContactFolder);
export { _ContactFolder };
export const ContactFolder = graphInvokableFactory(_ContactFolder);
/**
 * Contact Folders
 */
let _ContactFolders = class _ContactFolders extends _GraphQueryableCollection {
    /**
     * Create a new Contact Folder for the user.
     *
     * @param displayName The folder's display name.
     * @param parentFolderId The ID of the folder's parent folder.
     */
    async add(displayName, parentFolderId) {
        const postBody = {
            displayName: displayName,
            parentFolderId: parentFolderId,
        };
        const data = await graphPost(this, body(postBody));
        return {
            contactFolder: this.getById(data.id),
            data,
        };
    }
};
_ContactFolders = __decorate([
    defaultPath("contactFolders"),
    getById(ContactFolder)
], _ContactFolders);
export { _ContactFolders };
export const ContactFolders = graphInvokableFactory(_ContactFolders);
//# sourceMappingURL=types.js.map