import { __decorate } from "tslib";
import { body } from "@pnp/queryable";
import { GraphQueryableCollection, _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory, } from "../graphqueryable.js";
import { defaultPath, getById } from "../decorators.js";
import { graphPost } from "../operations.js";
/**
 * Represents a onenote entity
 */
let _OneNote = class _OneNote extends _GraphQueryableInstance {
    get notebooks() {
        return Notebooks(this);
    }
    get sections() {
        return Sections(this);
    }
    get pages() {
        return GraphQueryableCollection(this, "pages");
    }
};
_OneNote = __decorate([
    defaultPath("onenote")
], _OneNote);
export { _OneNote };
export const OneNote = graphInvokableFactory(_OneNote);
/**
 * Describes a notebook instance
 *
 */
export class _Notebook extends _GraphQueryableInstance {
    get sections() {
        return Sections(this);
    }
}
export const Notebook = graphInvokableFactory(_Notebook);
/**
 * Describes a collection of Notebook objects
 *
 */
let _Notebooks = class _Notebooks extends _GraphQueryableCollection {
    /**
     * Create a new notebook as specified in the request body.
     *
     * @param displayName Notebook display name
     */
    async add(displayName) {
        const data = await graphPost(this, body({ displayName }));
        return {
            data,
            notebook: this.getById(data.id),
        };
    }
};
_Notebooks = __decorate([
    defaultPath("notebooks"),
    getById(Notebook)
], _Notebooks);
export { _Notebooks };
export const Notebooks = graphInvokableFactory(_Notebooks);
/**
 * Describes a sections instance
 */
export class _Section extends _GraphQueryableInstance {
}
export const Section = graphInvokableFactory(_Section);
/**
 * Describes a collection of Sections objects
 *
 */
let _Sections = class _Sections extends _GraphQueryableCollection {
    /**
     * Adds a new section
     *
     * @param displayName New section display name
     */
    async add(displayName) {
        const data = await graphPost(this, body({ displayName }));
        return {
            data,
            section: this.getById(data.id),
        };
    }
};
_Sections = __decorate([
    defaultPath("sections"),
    getById(Section)
], _Sections);
export { _Sections };
export const Sections = graphInvokableFactory(_Sections);
//# sourceMappingURL=types.js.map