import { __decorate } from "tslib";
import { body } from "@pnp/queryable";
import { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory, } from "../graphqueryable.js";
import { defaultPath, updateable, deleteable, addable, getById } from "../decorators.js";
import { graphPost, graphDelete } from "../operations.js";
/**
 * Conversation
 */
let _Conversation = class _Conversation extends _GraphQueryableInstance {
    /**
     * Get all the threads in a group conversation.
     */
    get threads() {
        return Threads(this);
    }
};
_Conversation = __decorate([
    updateable(),
    deleteable()
], _Conversation);
export { _Conversation };
export const Conversation = graphInvokableFactory(_Conversation);
/**
 * Conversations
 */
let _Conversations = class _Conversations extends _GraphQueryableCollection {
};
_Conversations = __decorate([
    defaultPath("conversations"),
    addable(),
    getById(Conversation)
], _Conversations);
export { _Conversations };
export const Conversations = graphInvokableFactory(_Conversations);
/**
 * Thread
 */
let _Thread = class _Thread extends _GraphQueryableInstance {
    /**
     * Get all the threads in a group conversation.
     */
    get posts() {
        return Posts(this);
    }
    /**
     * Reply to a thread in a group conversation and add a new post to it
     *
     * @param post Contents of the post
     */
    reply(post) {
        return graphPost(Thread(this, "reply"), body(post));
    }
};
_Thread = __decorate([
    deleteable()
], _Thread);
export { _Thread };
export const Thread = graphInvokableFactory(_Thread);
/**
 * Threads
 */
let _Threads = class _Threads extends _GraphQueryableCollection {
};
_Threads = __decorate([
    defaultPath("threads"),
    addable(),
    getById(Thread)
], _Threads);
export { _Threads };
export const Threads = graphInvokableFactory(_Threads);
/**
 * Post
 */
let _Post = class _Post extends _GraphQueryableInstance {
    /**
     * Forward a post to a recipient
     */
    forward(info) {
        return graphPost(Post(this, "forward"), body(info));
    }
    /**
     * Reply to a thread in a group conversation and add a new post to it
     *
     * @param post Contents of the post
     */
    reply(post) {
        return graphPost(Post(this, "reply"), body(post));
    }
};
_Post = __decorate([
    deleteable()
], _Post);
export { _Post };
export const Post = graphInvokableFactory(_Post);
/**
 * Posts
 */
let _Posts = class _Posts extends _GraphQueryableCollection {
};
_Posts = __decorate([
    defaultPath("posts"),
    addable(),
    getById(Post)
], _Posts);
export { _Posts };
export const Posts = graphInvokableFactory(_Posts);
/**
 * Senders
 */
export class _Senders extends _GraphQueryableCollection {
    /**
     * Add a new user or group to this senders collection
     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)
     */
    add(id) {
        return graphPost(Senders(this, "$ref"), body({ "@odata.id": id }));
    }
    /**
     * Removes the entity from the collection
     *
     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)
     */
    remove(id) {
        const remover = Senders(this, "$ref");
        remover.query.set("$id", id);
        return graphDelete(remover);
    }
}
export const Senders = graphInvokableFactory(_Senders);
//# sourceMappingURL=types.js.map