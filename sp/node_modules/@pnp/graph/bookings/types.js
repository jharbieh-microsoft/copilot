import { __decorate } from "tslib";
import { _GraphQueryableCollection, graphInvokableFactory, _GraphQueryableInstance } from "../graphqueryable.js";
import { defaultPath, deleteable, updateable, getById } from "../decorators.js";
import { graphPost } from "../operations.js";
import { body } from "@pnp/queryable";
import { calendarView } from "./funcs.js";
/**
 * Describes a Booking Currency entity
 *
 */
export class _BookingCurrency extends _GraphQueryableInstance {
}
export const BookingCurrency = graphInvokableFactory(_BookingCurrency);
/**
 * Describes a collection of Booking Currency objects
 *
 */
let _BookingCurrencies = class _BookingCurrencies extends _GraphQueryableCollection {
};
_BookingCurrencies = __decorate([
    defaultPath("solutions/bookingCurrencies"),
    getById(BookingCurrency)
], _BookingCurrencies);
export { _BookingCurrencies };
export const BookingCurrencies = graphInvokableFactory(_BookingCurrencies);
/**
 * Represents a booking business entity
 */
let _BookingBusiness = class _BookingBusiness extends _GraphQueryableInstance {
    constructor() {
        super(...arguments);
        /**
         * Get the calendar view for the booking business.
         */
        this.calendarView = calendarView;
    }
    /**
     * Make the scheduling page of a business available to external customers.
     */
    publish() {
        return graphPost(BookingBusiness(this, "publish"));
    }
    /**
     * Make the scheduling page of this business not available to external customers.
     */
    unpublish() {
        return graphPost(BookingBusiness(this, "unpublish"));
    }
    /**
     * Get the appointments for the booking business.
     */
    get appointments() {
        return BookingAppointments(this);
    }
    /**
     * Get the customers for the booking business.
     */
    get customers() {
        return BookingCustomers(this);
    }
    /**
     * Get the services for the booking business.
     */
    get services() {
        return BookingServices(this);
    }
    /**
     * Get the staff members for the booking business.
     */
    get staffMembers() {
        return BookingStaffMembers(this);
    }
    /**
     * Get the staff members for the booking business.
     */
    get customQuestions() {
        return BookingCustomQuestions(this);
    }
};
_BookingBusiness = __decorate([
    deleteable(),
    updateable()
], _BookingBusiness);
export { _BookingBusiness };
export const BookingBusiness = graphInvokableFactory(_BookingBusiness);
/**
 * Describes a collection of Booking Business objects
 *
 */
let _BookingBusinesses = class _BookingBusinesses extends _GraphQueryableCollection {
    /**
         * Create a new booking business as specified in the request body.
         *
         * @param name The name of the business, which interfaces with customers. This name appears at the top of the business scheduling page.
         * @param additionalProperties A plain object collection of additional properties you want to set on the new group of type IBookingBusiness
         */
    async add(name, additionalProperties = {}) {
        const postBody = {
            displayName: name,
            ...additionalProperties,
        };
        const data = await graphPost(this, body(postBody));
        return {
            data,
            bookingBusiness: this.getById(data.id),
        };
    }
};
_BookingBusinesses = __decorate([
    defaultPath("solutions/bookingBusinesses"),
    getById(BookingBusiness)
], _BookingBusinesses);
export { _BookingBusinesses };
export const BookingBusinesses = graphInvokableFactory(_BookingBusinesses);
/**
 * Represents a booking appointment entity
 */
let _BookingApointment = class _BookingApointment extends _GraphQueryableInstance {
    /**
     * Cancel the specified bookingAppointment in the specified bookingBusiness and send a message to the involved customer and staff members.
     */
    cancel(cancellationMessage) {
        const postBody = { cancellationMessage };
        return graphPost(BookingAppointment(this, "cancel"), body(postBody));
    }
};
_BookingApointment = __decorate([
    deleteable(),
    updateable()
], _BookingApointment);
export { _BookingApointment };
export const BookingAppointment = graphInvokableFactory(_BookingApointment);
/**
 * Describes a collection of booking appointment objects
 *
 */
let _BookingAppointments = class _BookingAppointments extends _GraphQueryableCollection {
    /**
     * Create a new booking appointment as specified in the request body.
     *
     * @param bookingAppointment  a JSON representation of a BookingAppointment object.
     */
    async add(bookingAppointment) {
        const data = await graphPost(this, body(bookingAppointment));
        return {
            data,
            bookingAppointment: this.getById(data.id),
        };
    }
};
_BookingAppointments = __decorate([
    defaultPath("appointments"),
    getById(BookingAppointment)
], _BookingAppointments);
export { _BookingAppointments };
export const BookingAppointments = graphInvokableFactory(_BookingAppointments);
/**
 * Represents a booking customer entity
 */
let _BookingCustomer = class _BookingCustomer extends _GraphQueryableInstance {
};
_BookingCustomer = __decorate([
    deleteable(),
    updateable()
], _BookingCustomer);
export { _BookingCustomer };
export const BookingCustomer = graphInvokableFactory(_BookingCustomer);
/**
 * Describes a collection of booking customer objects
 *
 */
let _BookingCustomers = class _BookingCustomers extends _GraphQueryableCollection {
    /**
     * Create a new booking customer as specified in the request body.
     *
     * @param bookingCustomer  a JSON representation of a BookingCustomer object.
     */
    async add(bookingCustomer) {
        const data = await graphPost(this, body(bookingCustomer));
        return {
            data,
            bookingCustomer: this.getById(data.id),
        };
    }
};
_BookingCustomers = __decorate([
    defaultPath("customers"),
    getById(BookingCustomer)
], _BookingCustomers);
export { _BookingCustomers };
export const BookingCustomers = graphInvokableFactory(_BookingCustomers);
/**
 * Represents a booking service entity
 */
let _BookingService = class _BookingService extends _GraphQueryableInstance {
};
_BookingService = __decorate([
    deleteable(),
    updateable()
], _BookingService);
export { _BookingService };
export const BookingService = graphInvokableFactory(_BookingService);
/**
 * Describes a collection of booking service objects
 *
 */
let _BookingServices = class _BookingServices extends _GraphQueryableCollection {
    /**
     * Create a new booking service as specified in the request body.
     *
     * @param bookingService  a JSON representation of a BookingService object.
     */
    async add(bookingService) {
        const data = await graphPost(this, body(bookingService));
        return {
            data,
            bookingService: this.getById(data.id),
        };
    }
};
_BookingServices = __decorate([
    defaultPath("services"),
    getById(BookingService)
], _BookingServices);
export { _BookingServices };
export const BookingServices = graphInvokableFactory(_BookingServices);
/**
 * Represents a booking staffmember entity
 */
let _BookingStaffMember = class _BookingStaffMember extends _GraphQueryableInstance {
};
_BookingStaffMember = __decorate([
    deleteable(),
    updateable()
], _BookingStaffMember);
export { _BookingStaffMember };
export const BookingStaffMember = graphInvokableFactory(_BookingStaffMember);
/**
 * Describes a collection of booking staffmember objects
 *
 */
let _BookingStaffMembers = class _BookingStaffMembers extends _GraphQueryableCollection {
    /**
     * Create a new booking staffmember as specified in the request body.
     *
     * @param bookingStaffMember  a JSON representation of a BookingStaffMember object.
     */
    async add(bookingStaffMember) {
        const data = await graphPost(this, body(bookingStaffMember));
        return {
            data,
            bookingStaffMember: this.getById(data.id),
        };
    }
};
_BookingStaffMembers = __decorate([
    defaultPath("staffMembers"),
    getById(BookingStaffMember)
], _BookingStaffMembers);
export { _BookingStaffMembers };
export const BookingStaffMembers = graphInvokableFactory(_BookingStaffMembers);
/**
 * Represents a booking custom questions entity
 */
let _BookingCustomQuestion = class _BookingCustomQuestion extends _GraphQueryableInstance {
};
_BookingCustomQuestion = __decorate([
    deleteable(),
    updateable()
], _BookingCustomQuestion);
export { _BookingCustomQuestion };
export const BookingCustomQuestion = graphInvokableFactory(_BookingCustomQuestion);
/**
 * Describes a collection of booking custom questions objects
 *
 */
let _BookingCustomQuestions = class _BookingCustomQuestions extends _GraphQueryableCollection {
    /**
     * Create a new booking customquestions as specified in the request body.
     *
     * @param bookingCustomQuestion  a JSON representation of a BookingCustomQuestion object.
     */
    async add(bookingCustomQuestion) {
        const data = await graphPost(this, body(bookingCustomQuestion));
        return {
            data,
            bookingCustomQuestion: this.getById(data.id),
        };
    }
};
_BookingCustomQuestions = __decorate([
    defaultPath("customquestions"),
    getById(BookingCustomQuestion)
], _BookingCustomQuestions);
export { _BookingCustomQuestions };
export const BookingCustomQuestions = graphInvokableFactory(_BookingCustomQuestions);
//# sourceMappingURL=types.js.map