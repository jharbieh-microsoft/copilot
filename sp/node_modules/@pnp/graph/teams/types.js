import { __decorate } from "tslib";
import { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory, GraphQueryableInstance } from "../graphqueryable.js";
import { body, HeaderParse } from "@pnp/queryable";
import { updateable, getById, deleteable } from "../decorators.js";
import { graphPost } from "../operations.js";
import { defaultPath } from "../decorators.js";
/**
 * Represents a Microsoft Team
 */
let _Team = class _Team extends _GraphQueryableInstance {
    get primaryChannel() {
        return Channel(this, "primaryChannel");
    }
    get channels() {
        return Channels(this);
    }
    get installedApps() {
        return InstalledApps(this);
    }
    /**
     * Archives this Team
     *
     * @param shouldSetSpoSiteReadOnlyForMembers Should members have Read-only in associated Team Site
     */
    archive(shouldSetSpoSiteReadOnlyForMembers = false) {
        return graphPost(Team(this, "archive"), body({ shouldSetSpoSiteReadOnlyForMembers }));
    }
    /**
    * Unarchives this Team
    */
    unarchive() {
        return graphPost(Team(this, "unarchive"));
    }
    /**
     * Clones this Team
     * @param name The name of the new Group
     * @param description Optional description of the group
     * @param partsToClone Parts to clone ex: apps,tabs,settings,channels,members
     * @param visibility Set visibility to public or private
     */
    async cloneTeam(name, description = "", partsToClone = "apps,tabs,settings,channels,members", visibility = "private") {
        const postBody = {
            description: description ? description : "",
            displayName: name,
            mailNickname: name,
            partsToClone,
            visibility,
        };
        // TODO:: make sure this works
        const creator = Teams(this, "clone").using((instance) => {
            instance.on.parse(async (url, response, result) => {
                result = response.headers.has("location") ? response.headers : response;
                return [url, response, result];
            });
            return instance;
        });
        const data = await graphPost(creator, body(postBody));
        const result = { teamId: "", operationId: "" };
        if (data.has("location")) {
            const location = data.get("location");
            const locationArray = location.split("/");
            if (locationArray.length === 3) {
                result.teamId = locationArray[1].substring(locationArray[1].indexOf("'") + 1, locationArray[1].lastIndexOf("'"));
                result.operationId = locationArray[2].substring(locationArray[2].indexOf("'") + 1, locationArray[2].lastIndexOf("'"));
            }
        }
        return result;
    }
    getOperationById(id) {
        return GraphQueryableInstance(this, `operations/${id}`)();
    }
};
_Team = __decorate([
    defaultPath("team"),
    updateable()
], _Team);
export { _Team };
export const Team = graphInvokableFactory(_Team);
/**
 * Teams
 */
let _Teams = class _Teams extends _GraphQueryableCollection {
    async create(team) {
        const creator = Teams(this, null).using(HeaderParse());
        const data = await graphPost(creator, body(team));
        const result = { teamId: "", operationId: "" };
        if (data.has("location")) {
            const location = data.get("location");
            const locationArray = location.split("/");
            if (locationArray.length === 3) {
                result.teamId = locationArray[1].substring(locationArray[1].indexOf("'") + 1, locationArray[1].lastIndexOf("'"));
                result.operationId = locationArray[2].substring(locationArray[2].indexOf("'") + 1, locationArray[2].lastIndexOf("'"));
            }
        }
        return result;
    }
};
_Teams = __decorate([
    defaultPath("teams"),
    getById(Team)
], _Teams);
export { _Teams };
export const Teams = graphInvokableFactory(_Teams);
/**
 * Channel
 */
export class _Channel extends _GraphQueryableInstance {
    get tabs() {
        return Tabs(this);
    }
    async messages(message) {
        return graphPost(Channel(this, "messages"), body(message));
    }
}
export const Channel = graphInvokableFactory(_Channel);
/**
 * Channels
 */
let _Channels = class _Channels extends _GraphQueryableCollection {
    /**
     * Creates a new Channel in the Team
     * @param displayName The display name of the new channel
     * @param description Optional description of the channel
     *
     */
    async add(displayName, description = "") {
        const postBody = {
            description,
            displayName,
        };
        const data = await graphPost(this, body(postBody));
        return {
            channel: this.getById(data.id),
            data,
        };
    }
};
_Channels = __decorate([
    defaultPath("channels"),
    getById(Channel)
], _Channels);
export { _Channels };
export const Channels = graphInvokableFactory(_Channels);
/**
 * Tab
 */
let _Tab = class _Tab extends _GraphQueryableInstance {
};
_Tab = __decorate([
    defaultPath("tab"),
    updateable(),
    deleteable()
], _Tab);
export { _Tab };
export const Tab = graphInvokableFactory(_Tab);
/**
 * Tabs
 */
let _Tabs = class _Tabs extends _GraphQueryableCollection {
    /**
     * Adds a tab to the channel
     * @param name The name of the new Tab
     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a
     * @param tabsConfiguration visit https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/teamstab_add for reference
     */
    async add(name, appUrl, properties) {
        const postBody = {
            displayName: name,
            "teamsApp@odata.bind": appUrl,
            ...properties,
        };
        const data = await graphPost(this, body(postBody));
        return {
            data,
            tab: this.getById(data.id),
        };
    }
};
_Tabs = __decorate([
    defaultPath("tabs"),
    getById(Tab)
], _Tabs);
export { _Tabs };
export const Tabs = graphInvokableFactory(_Tabs);
/**
 * InstalledApp
 */
let _InstalledApp = class _InstalledApp extends _GraphQueryableInstance {
    upgrade() {
        return graphPost(InstalledApp(this, "upgrade"));
    }
};
_InstalledApp = __decorate([
    deleteable()
], _InstalledApp);
export { _InstalledApp };
export const InstalledApp = graphInvokableFactory(_InstalledApp);
/**
 * InstalledApps
 */
let _InstalledApps = class _InstalledApps extends _GraphQueryableCollection {
    /**
     * Adds an installed app to the collection
     * @param teamsAppId The id of the app to add.
     */
    async add(teamsAppId) {
        const data = await graphPost(this, body({
            "teamsApp@odata.bind": teamsAppId,
        }));
        return {
            data,
            app: this.getById(data.id),
        };
    }
};
_InstalledApps = __decorate([
    defaultPath("installedApps"),
    getById(InstalledApp)
], _InstalledApps);
export { _InstalledApps };
export const InstalledApps = graphInvokableFactory(_InstalledApps);
//# sourceMappingURL=types.js.map