import { __decorate } from "tslib";
import { body } from "@pnp/queryable";
import { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from "../graphqueryable.js";
import { defaultPath, deleteable, updateable, getById } from "../decorators.js";
import { graphPost } from "../operations.js";
import { calendarView, instances } from "./funcs.js";
/**
 * Calendar
 */
export class _Calendar extends _GraphQueryableInstance {
    constructor() {
        super(...arguments);
        this.calendarView = calendarView;
    }
    get events() {
        return Events(this);
    }
}
export const Calendar = graphInvokableFactory(_Calendar);
/**
 * Calendars
 */
let _Calendars = class _Calendars extends _GraphQueryableCollection {
};
_Calendars = __decorate([
    defaultPath("calendars"),
    getById(Calendar)
], _Calendars);
export { _Calendars };
export const Calendars = graphInvokableFactory(_Calendars);
/**
 * Event
 */
let _Event = class _Event extends _GraphQueryableInstance {
    constructor() {
        super(...arguments);
        this.instances = instances;
    }
};
_Event = __decorate([
    deleteable(),
    updateable()
], _Event);
export { _Event };
export const Event = graphInvokableFactory(_Event);
/**
 * Events
 */
let _Events = class _Events extends _GraphQueryableCollection {
    /**
     * Adds a new event to the collection
     *
     * @param properties The set of properties used to create the event
     */
    async add(properties) {
        const data = await graphPost(this, body(properties));
        return {
            data,
            event: this.getById(data.id),
        };
    }
};
_Events = __decorate([
    defaultPath("events"),
    getById(Event)
], _Events);
export { _Events };
export const Events = graphInvokableFactory(_Events);
//# sourceMappingURL=types.js.map