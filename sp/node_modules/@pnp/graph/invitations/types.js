import { __decorate } from "tslib";
import { body } from "@pnp/queryable";
import { _GraphQueryableCollection, graphInvokableFactory } from "../graphqueryable.js";
import { defaultPath } from "../decorators.js";
import { graphPost } from "../operations.js";
/**
 * Invitations
 */
let _Invitations = class _Invitations extends _GraphQueryableCollection {
    /**
     * Create a new Invitation via invitation manager.
     *
     * @param invitedUserEmailAddress The email address of the user being invited.
     * @param inviteRedirectUrl The URL user should be redirected to once the invitation is redeemed.
     * @param additionalProperties A plain object collection of additional properties you want to set in the invitation
     */
    async create(invitedUserEmailAddress, inviteRedirectUrl, additionalProperties = {}) {
        const postBody = {
            inviteRedirectUrl,
            invitedUserEmailAddress,
            ...additionalProperties,
        };
        const data = await graphPost(this, body(postBody));
        return { data };
    }
};
_Invitations = __decorate([
    defaultPath("invitations")
], _Invitations);
export { _Invitations };
export const Invitations = graphInvokableFactory(_Invitations);
//# sourceMappingURL=types.js.map