import { BrowserFetchWithRetry, DefaultParse } from "@pnp/queryable";
import { DefaultHeaders, DefaultInit } from "./defaults.js";
export function SPFxToken(context) {
    return (instance) => {
        instance.on.auth.replace(async function (url, init) {
            const provider = await context.aadTokenProviderFactory.getTokenProvider();
            const token = await provider.getToken(`${url.protocol}//${url.hostname}`);
            // eslint-disable-next-line @typescript-eslint/dot-notation
            init.headers["Authorization"] = `Bearer ${token}`;
            return [url, init];
        });
        return instance;
    };
}
export function SPFx(context) {
    return (instance) => {
        instance.using(DefaultHeaders(), DefaultInit(), BrowserFetchWithRetry(), DefaultParse(), SPFxToken(context));
        return instance;
    };
}
//# sourceMappingURL=spfx.js.map